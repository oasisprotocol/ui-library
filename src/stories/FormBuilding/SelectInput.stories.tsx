import type { Meta, StoryObj } from '@storybook/react-vite'
import { expect, within } from 'storybook/test'
import { SelectInput, useOneOfField, deny } from '../../components/ui-plus-behavior/input'
import { Button } from '../../components'

const meta: Meta<typeof SelectInput> = {
  title: 'ui-plus-behavior/useOneOfField() and <SelectInput>',
  component: SelectInput,
  parameters: {
    docs: {
      description: {
        component: 'A controlled select input with various builtin behaviors.',
      },
    },
    layout: 'centered',
  },
  tags: ['autodocs'],
}

export default meta
type Story = StoryObj<typeof meta>

export const Default: Story = {
  render: function Example() {
    const selection = useOneOfField({
      name: 'testSelect',
      label: 'Test **select**',
      description: 'What do we have _here_?',
      choices: [
        {
          value: 'one',
          label: '**First** option',
        },
        {
          value: 'two',
          label: '_Second_ option',
        },
        {
          value: 'three',
          label: 'Third option',
        },
      ] as const,
    })

    return (
      <div className={'w-[400px]'}>
        <SelectInput {...selection} /> {/* This is our component */}
        Value: "{selection.value}"
      </div>
    )
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement)
    const button = canvas.getAllByRole('label', { name: 'Test label' })[0]
    await expect(button).toBeInTheDocument()
  },
}

export const Disabled: Story = {
  render: function Example() {
    const selection = useOneOfField({
      name: 'testSelect',
      label: 'Test **select**',
      choices: ['one', 'two', 'three'],
      enabled: deny("Don't touch this!"),
    })

    return (
      <div className={'w-[400px]'}>
        <SelectInput {...selection} /> {/* This is our component */}
        Value: "{selection.value}"
      </div>
    )
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement)
    const button = canvas.getAllByRole('label', { name: 'Test label' })[0]
    await expect(button).toBeInTheDocument()
  },
}

export const AutoGeneratedLabels: Story = {
  render: function Example() {
    const selection = useOneOfField('test select', ['one', 'two', 'three'] as const)

    return (
      <div className={'w-[400px]'}>
        <SelectInput {...selection} /> {/* This is our component */}
        Value: "{selection.value}"
      </div>
    )
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement)
    const button = canvas.getAllByRole('label', { name: 'Test label' })[0]
    await expect(button).toBeInTheDocument()
  },
}

export const WithDescription: Story = {
  render: function Example() {
    const selection = useOneOfField({
      name: 'testSelect',
      label: 'Test **select**',
      choices: [
        {
          value: 'one',
          label: '**One**',
          description: 'Well, we have to start somewhere, right?',
        },
        {
          value: 'two',
          label: '_Two_',
        },
        {
          value: 'three',
          label: 'Three',
        },
      ],
    })

    return (
      <div className={'w-[400px]'}>
        <SelectInput {...selection} /> {/* This is our component */}
        Value: "{selection.value}"
      </div>
    )
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement)
    const button = canvas.getAllByRole('label', { name: 'Test label' })[0]
    await expect(button).toBeInTheDocument()
  },
}

export const WithDisabledOptions: Story = {
  render: function Example() {
    const selection = useOneOfField({
      name: 'testSelect',
      label: 'Test **select**',
      description: 'What do we have _here_?',
      choices: [
        {
          value: 'one',
          label: '**One**',
        },
        {
          value: 'two',
          label: '_Two_',
        },
        {
          value: 'three',
          label: 'Three',
          enabled: deny("That's _way_ **too much**!"),
        },
        {
          value: 'four',
          hidden: true,
        },
      ],
    })

    return (
      <div className={'w-[400px]'}>
        <SelectInput {...selection} /> {/* This is our component */}
        Value: "{selection.value}"
      </div>
    )
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement)
    const button = canvas.getAllByRole('label', { name: 'Test label' })[0]
    await expect(button).toBeInTheDocument()
  },
}

export const WithOnlyOneOption: Story = {
  render: function Example() {
    const selection = useOneOfField({
      name: 'testSelect',
      label: 'Test **select**',
      description: 'What do we have _here_?',
      disableIfOnlyOneVisibleChoice: true,
      hideDisabledChoices: true,
      choices: [
        {
          value: 'one',
          label: '**One**',
        },
        {
          value: 'two',
          label: '_Two_',
          enabled: false, // This is disabled, thus hidden
        },
      ],
    })

    return (
      <div className={'w-[400px]'}>
        <SelectInput {...selection} /> {/* This is our component */}
        Value: "{selection.value}"
      </div>
    )
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement)
    const button = canvas.getAllByRole('label', { name: 'Test label' })[0]
    await expect(button).toBeInTheDocument()
  },
}

export const WithError: Story = {
  render: function Example() {
    const selection = useOneOfField({
      name: 'testSelect',
      label: 'Test **select**',
      choices: ['one', 'two', 'three'],
      validators: c => (c === 'one' ? "Let's avoid one!" : undefined),
      validateOnChange: true,
    })

    return (
      <div className={'w-[400px]'}>
        <SelectInput {...selection} /> {/* This is our component */}
        Value: "{selection.value}"
      </div>
    )
  },

  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement)
    const button = canvas.getAllByRole('label', { name: 'Test label' })[0]
    await expect(button).toBeInTheDocument()
  },
}

export const WithWarning: Story = {
  render: function Example() {
    const selection = useOneOfField({
      name: 'testSelect',
      label: 'Test **select**',
      choices: ['one', 'two', 'three'],
      validators: c => (c === 'one' ? { type: 'warning', text: "I don't like one!" } : undefined),
      validateOnChange: true,
    })

    return (
      <div className={'w-[400px]'}>
        <SelectInput {...selection} /> {/* This is our component */}
        Value: "{selection.value}"
      </div>
    )
  },

  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement)
    const button = canvas.getAllByRole('label', { name: 'Test label' })[0]
    await expect(button).toBeInTheDocument()
  },
}

export const WithPlaceholder: Story = {
  render: function Example() {
    const selection = useOneOfField({
      name: 'testSelect',
      label: 'Test **select**',
      placeholder: 'Which one do you want?',
      // canSelectPlaceholder: false,
      choices: [
        {
          value: 'one',
          label: '**First** option',
        },
        {
          value: 'two',
          label: '_Second_ option',
        },
        {
          value: 'three',
          label: 'Third option',
        },
      ] as const,
      required: true,
      validateOnChange: true,
    })

    // selection.setValue(undefined)
    // if (selection.value === undefined) {
    // }

    return (
      <div className={'w-[400px]'}>
        <SelectInput {...selection} /> {/* This is our component */}
        Value: {selection.value === undefined ? 'undefined' : `"${selection.value}"`}
        <br />
        <Button onClick={() => selection.setValue(undefined)}>Unselect</Button>
        <br />
        isEmpty? {selection.isEmpty.toString()}
      </div>
    )
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement)
    const button = canvas.getAllByRole('label', { name: 'Test label' })[0]
    await expect(button).toBeInTheDocument()
  },
}
