import type { Meta, StoryObj } from '@storybook/react-vite'
import {
  SelectInput,
  useOneOfField,
  HasToString,
  NonNullableOneOfFieldProps,
  NullableOneOfFieldProps,
  deny,
  useNullableOneOfField,
  useNonNullableOneOfField,
} from '../../components/ui-plus-behavior/input'
import { ReactElement } from 'react'

function SelectInputTest<DataType extends HasToString>(
  props: NonNullableOneOfFieldProps<DataType>
): ReactElement

function SelectInputTest<DataType extends HasToString>(props: NullableOneOfFieldProps<DataType>): ReactElement

function SelectInputTest<DataType extends HasToString>(
  props: NullableOneOfFieldProps<DataType> | NonNullableOneOfFieldProps<DataType>
): ReactElement {
  const controls =
    'placeholder' in props
      ? // eslint-disable-next-line react-hooks/rules-of-hooks
        useNullableOneOfField(props as NullableOneOfFieldProps<DataType>)
      : // eslint-disable-next-line react-hooks/rules-of-hooks
        useNonNullableOneOfField(props as NonNullableOneOfFieldProps<DataType>)

  return <SelectInput {...controls} />
}

const meta: Meta<typeof SelectInputTest> = {
  title: 'ui-plus-behavior/useOneOfField() and <SelectInput>',
  component: SelectInputTest,
  args: {
    compact: true,
  },
  parameters: {
    docs: {
      description: {
        component: 'A controlled select input with various builtin behaviors.',
      },
    },
    layout: 'centered',
  },
  tags: ['autodocs'],
}

export default meta
type Story = StoryObj<typeof meta>

export const Default: Story = {
  args: {
    name: 'testSelect',
    description: 'What do we have _here_?',
    choices: [
      {
        value: 'one',
        label: '**First** option',
      },
      {
        value: 'two',
        label: '_Second_ option',
      },
      {
        value: 'three',
        label: 'Third option',
      },
    ] as const,
  },
}

export const Disabled: Story = {
  args: {
    name: 'testSelect',
    choices: ['one', 'two', 'three'],
    enabled: deny("Don't touch this!"),
  },
}

export const AutoGeneratedLabels: Story = {
  args: {
    name: 'testSelect',
    choices: ['one', 'two', 'three'],
  },
}

export const WithChoicesWithDescription: Story = {
  args: {
    name: 'testSelect',
    choices: [
      {
        value: 'one',
        label: '**One**',
        description: 'Well, we have to start somewhere, right?',
      },
      {
        value: 'two',
        label: '_Two_',
      },
      {
        value: 'three',
        label: 'Three',
      },
    ],
  },
}

export const WithDisabledAndHiddenOptions: Story = {
  args: {
    name: 'testSelect',
    description: 'What do we have _here_?',
    choices: [
      'one',
      'two',
      {
        value: 'three',
        enabled: deny("That's _way_ **too much**!"),
      },
      {
        value: 'four',
        hidden: true,
      },
    ],
  },
}

export const WithOnlyOneOption: Story = {
  args: {
    name: 'testSelect',
    description: 'What do we have _here_?',
    disableIfOnlyOneVisibleChoice: true, // This is an optional behavior
    choices: ['revolution'],
  },
}

export const WithError: Story = {
  args: {
    name: 'testSelect',
    choices: ['one', 'two', 'three'] as const,
    // Fot better type safety, see the test cases below
    validators: c => (c !== 'two' ? "Let's odd numbers!" : undefined),
    validateOnChange: true,
  },
}

export const WithWarning: Story = {
  args: {
    name: 'testSelect',
    choices: ['one', 'two', 'three'],
    validators: c => (c === 'two' ? { type: 'warning', text: "I don't like even numbers" } : undefined),
    validateOnChange: true,
  },
}

export const WithPlaceholder: Story = {
  args: {
    name: 'testSelect',
    label: 'Test **select**',
    placeholder: 'Which one do you want?',
    choices: ['one', 'two', 'three'] as const,
  },
}

export const WithUnselectablePlaceholder: Story = {
  args: {
    name: 'testSelect',
    label: 'Test **select**',
    placeholder: 'Which one do you want?',
    canSelectPlaceholder: false,
    choices: ['one', 'two', 'three'] as const,
  },
}

export const WithTypeSafety: Story = {
  render: () => (
    // To achieve stricter type safety, we need to use the hook and the UI component separately,
    // So we will do that here, unlike in the rest of this file
    <SelectInput
      {...useOneOfField({
        name: 'testSelect',
        description: 'Look at the source code of this one',
        choices: ['one', 'two', 'three'] as const,
        validators: value => {
          // Inferred type: (value: 'one' | 'two' | 'three')
          switch (value) {
            case 'two':
              return 'Oh no, not two!'
            /**
             * Uncommenting the next line would produce a Compile-time TypeScript error,
             * since the compiler knows that no such choice is available
             */
            // case 'four':
            //   break
          }
          return undefined
        },
        validateOnChange: true,
      })}
    />
  ),
}

export const WithPlaceholderAndTypeSafety: Story = {
  render: () => (
    // To achieve stricter type safety, we need to use the hook and the UI component separately,
    // So we will do that here, unlike in the rest of this file
    <SelectInput
      {...useOneOfField({
        name: 'testSelect',
        description: 'Look at the source code of this one',
        placeholder: true,
        choices: ['one', 'two', 'three'] as const,
        validators: value => {
          // Inferred type: (value: 'one' | 'two' | 'three' | undefined)
          // The undefined option is included, because placeholder is enabled.
          switch (value) {
            case 'two':
              return 'Oh no, not two!'
            /**
             * Uncommenting the next line would produce a Compile-time TypeScript error,
             * since the compiler knows that no such choice is available
             */
            // case 'four':
            //   break
          }
          return undefined
        },
        validateOnChange: true,
      })}
    />
  ),
}
